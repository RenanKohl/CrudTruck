{"ast":null,"code":"import { MatPaginatorIntl } from '@angular/material/paginator';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nexport let CustomMatPaginatorIntl = /*#__PURE__*/(() => {\n  class CustomMatPaginatorIntl extends MatPaginatorIntl {\n    constructor(translate) {\n      super();\n      this.translate = translate;\n      this.unsubscribe = new Subject();\n      this.OF_LABEL = 'of';\n\n      this.getRangeLabel = (page, pageSize, length) => {\n        if (length === 0 || pageSize === 0) {\n          return `0 ${this.OF_LABEL} ${length}`;\n        }\n\n        length = Math.max(length, 0);\n        const startIndex = page * pageSize;\n        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n        return `${startIndex + 1} - ${endIndex} ${this.OF_LABEL} ${length}`;\n      };\n\n      this.translate.onLangChange // .takeUntil(this.unsubscribe)\n      .subscribe(() => {\n        this.getAndInitTranslations();\n      });\n      this.getAndInitTranslations();\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe.next();\n      this.unsubscribe.complete();\n    }\n\n    getAndInitTranslations() {\n      this.translate.get(['PAGINATOR.ITEMS_PER_PAGE', 'PAGINATOR.NEXT_PAGE', 'PAGINATOR.PREVIOUS_PAGE', 'PAGINATOR.OF_LABEL']) // .takeUntil(this.unsubscribe)\n      .subscribe(translation => {\n        this.itemsPerPageLabel = translation['PAGINATOR.ITEMS_PER_PAGE'];\n        this.nextPageLabel = translation['PAGINATOR.NEXT_PAGE'];\n        this.previousPageLabel = translation['PAGINATOR.PREVIOUS_PAGE'];\n        this.OF_LABEL = translation['PAGINATOR.OF_LABEL'];\n        this.changes.next();\n      });\n    }\n\n  }\n\n  CustomMatPaginatorIntl.ɵfac = function CustomMatPaginatorIntl_Factory(t) {\n    return new (t || CustomMatPaginatorIntl)(i0.ɵɵinject(i1.TranslateService));\n  };\n\n  CustomMatPaginatorIntl.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomMatPaginatorIntl,\n    factory: CustomMatPaginatorIntl.ɵfac\n  });\n  return CustomMatPaginatorIntl;\n})();","map":null,"metadata":{},"sourceType":"module"}