{"ast":null,"code":"import { fromEvent, map, merge, of, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./header/header.component\";\nimport * as i2 from \"@angular/router\";\nexport let ShellComponent = /*#__PURE__*/(() => {\n  class ShellComponent {\n    constructor() {\n      this.networkStatus = false;\n      this.networkStatus$ = Subscription.EMPTY;\n    }\n\n    ngOnInit() {\n      this.checkNetworkStatus();\n    }\n\n    ngOnDestroy() {\n      this.networkStatus$.unsubscribe();\n    }\n\n    checkNetworkStatus() {\n      this.networkStatus = navigator.onLine;\n      this.networkStatus$ = merge(of(null), fromEvent(window, 'online'), fromEvent(window, 'offline')).pipe(map(() => navigator.onLine)).subscribe(status => {\n        console.log('status', status);\n        this.networkStatus = status;\n      });\n    }\n\n  }\n\n  ShellComponent.ɵfac = function ShellComponent_Factory(t) {\n    return new (t || ShellComponent)();\n  };\n\n  ShellComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ShellComponent,\n    selectors: [[\"app-shell\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[\"role\", \"alert\", 1, \"alert\", \"alert-danger\", 3, \"hidden\"]],\n    template: function ShellComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-header\");\n        i0.ɵɵtext(1, \"\\n\");\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵtext(3, \"\\n  Voc\\u00EA est\\u00E1 offline\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4, \"\\n\");\n        i0.ɵɵelement(5, \"router-outlet\");\n        i0.ɵɵtext(6, \"\\n\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.networkStatus);\n      }\n    },\n    directives: [i1.HeaderComponent, i2.RouterOutlet],\n    styles: [\"\"]\n  });\n  return ShellComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}