{"ast":null,"code":"import { AngularFireMessaging } from '@angular/fire/compat/messaging';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { SwPush } from '@angular/service-worker';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/messaging\";\nimport * as i2 from \"@angular/service-worker\";\nexport let MessagingService = /*#__PURE__*/(() => {\n  class MessagingService {\n    constructor(angularFireMessaging, swPush) {\n      this.angularFireMessaging = angularFireMessaging;\n      this.swPush = swPush;\n      this.currentMessage = new BehaviorSubject(null);\n      this.angularFireMessaging.messages.subscribe(message => {\n        // message.onMessage = message.onMessage.bind(message);\n        // message.onTokenRefresh = message.onTokenRefresh.bind(message);\n        console.log(message);\n      });\n    }\n\n    requestPermission() {\n      this.swPush.requestSubscription({\n        serverPublicKey: environment.vapidPublicKey\n      }).then(sub => console.log(sub)).catch(err => console.error(\"Could not subscribe to notifications\", err));\n    }\n\n    receiveMessage() {\n      this.angularFireMessaging.messages.subscribe(payload => {\n        console.log(\"new message received. \", payload);\n        this.currentMessage.next(payload);\n      });\n    }\n\n  }\n\n  MessagingService.ɵfac = function MessagingService_Factory(t) {\n    return new (t || MessagingService)(i0.ɵɵinject(i1.AngularFireMessaging), i0.ɵɵinject(i2.SwPush));\n  };\n\n  MessagingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagingService,\n    factory: MessagingService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessagingService;\n})();","map":null,"metadata":{},"sourceType":"module"}