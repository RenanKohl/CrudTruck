{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst credentialsKey = 'credentials';\n/**\r\n * Provides storage for authentication credentials.\r\n * The Credentials interface should be replaced with proper implementation.\r\n */\n\nexport let CredentialsService = /*#__PURE__*/(() => {\n  class CredentialsService {\n    constructor() {\n      this._credentials = null;\n      const savedCredentials = sessionStorage.getItem(credentialsKey) || localStorage.getItem(credentialsKey);\n\n      if (savedCredentials) {\n        this._credentials = JSON.parse(savedCredentials);\n      }\n    }\n    /**\r\n     * Checks is the user is authenticated.\r\n     * @return True if the user is authenticated.\r\n     */\n\n\n    isAuthenticated() {\n      return !!this.credentials;\n    }\n    /**\r\n     * Gets the user credentials.\r\n     * @return The user credentials or null if the user is not authenticated.\r\n     */\n\n\n    get credentials() {\n      return this._credentials;\n    }\n    /**\r\n     * Sets the user credentials.\r\n     * The credentials may be persisted across sessions by setting the `remember` parameter to true.\r\n     * Otherwise, the credentials are only persisted for the current session.\r\n     * @param credentials The user credentials.\r\n     * @param remember True to remember credentials across sessions.\r\n     */\n\n\n    setCredentials(credentials, remember) {\n      this._credentials = credentials || null;\n\n      if (credentials) {\n        const storage = remember ? localStorage : sessionStorage;\n        storage.setItem(credentialsKey, JSON.stringify(credentials));\n      } else {\n        sessionStorage.removeItem(credentialsKey);\n        localStorage.removeItem(credentialsKey);\n      }\n    }\n\n  }\n\n  CredentialsService.ɵfac = function CredentialsService_Factory(t) {\n    return new (t || CredentialsService)();\n  };\n\n  CredentialsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CredentialsService,\n    factory: CredentialsService.ɵfac,\n    providedIn: 'root'\n  });\n  return CredentialsService;\n})();","map":null,"metadata":{},"sourceType":"module"}