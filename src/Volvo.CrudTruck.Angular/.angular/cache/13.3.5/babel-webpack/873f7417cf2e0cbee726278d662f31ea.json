{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\nimport { TranslateService } from '@ngx-translate/core';\nimport { fromEvent, merge } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { environment } from '@env/environment';\nimport { Logger, UntilDestroy, untilDestroyed } from '@core';\nimport { I18nService } from '@app/i18n';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@app/i18n\";\nconst log = new Logger('App');\nlet AppComponent = class AppComponent {\n  constructor(router, activatedRoute, titleService, translateService, i18nService) {\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.titleService = titleService;\n    this.translateService = translateService;\n    this.i18nService = i18nService;\n    this.subscriptions = [];\n  }\n\n  ngOnInit() {\n    this.handleAppConnectivityChanges(); // Setup logger\n\n    if (environment.production) {\n      Logger.enableProductionMode();\n    }\n\n    log.debug('init'); // Setup translations\n\n    this.i18nService.init(environment.defaultLanguage, environment.supportedLanguages);\n    const onNavigationEnd = this.router.events.pipe(filter(event => event instanceof NavigationEnd)); // Change page title on navigation or language change, based on route data\n\n    merge(this.translateService.onLangChange, onNavigationEnd).pipe(map(() => {\n      let route = this.activatedRoute;\n\n      while (route.firstChild) {\n        route = route.firstChild;\n      }\n\n      return route;\n    }), filter(route => route.outlet === 'primary'), switchMap(route => route.data), untilDestroyed(this)).subscribe(event => {\n      const title = event.title;\n\n      if (title) {\n        this.titleService.setTitle(this.translateService.instant(title));\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.i18nService.destroy();\n  }\n\n  handleAppConnectivityChanges() {\n    this.onlineEvent = fromEvent(window, 'online');\n    this.offlineEvent = fromEvent(window, 'offline');\n    this.subscriptions.push(this.onlineEvent.subscribe(e => {\n      // handle online mode\n      console.log('Online...');\n    }));\n    this.subscriptions.push(this.offlineEvent.subscribe(e => {\n      // handle offline mode\n      console.log('Offline...');\n    }));\n  }\n\n};\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Title), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i4.I18nService));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 2,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"router-outlet\");\n      i0.ɵɵtext(1, \"\\n\");\n    }\n  },\n  styles: [\"\"]\n});\nAppComponent = __decorate([UntilDestroy(), __metadata(\"design:paramtypes\", [Router, ActivatedRoute, Title, TranslateService, I18nService])], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module"}