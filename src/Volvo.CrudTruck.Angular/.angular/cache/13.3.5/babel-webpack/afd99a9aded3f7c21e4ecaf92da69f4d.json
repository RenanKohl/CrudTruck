{"ast":null,"code":"import { TranslateService } from '@ngx-translate/core';\nimport { Logger } from '@core/logger.service';\nimport enUS from '../../translations/en-US.json';\nimport ptBR from '../../translations/pt-BR.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nconst log = new Logger('I18nService');\nconst languageKey = 'language';\nexport let I18nService = /*#__PURE__*/(() => {\n  class I18nService {\n    constructor(translateService) {\n      this.translateService = translateService; // Embed languages to avoid extra HTTP requests\n\n      translateService.setTranslation('en-US', enUS);\n      translateService.setTranslation('pt-BR', ptBR);\n    }\n    /**\r\n     * Initializes i18n for the application.\r\n     * Loads language from local storage if present, or sets default language.\r\n     * @param defaultLanguage The default language to use.\r\n     * @param supportedLanguages The list of supported languages.\r\n     */\n\n\n    init(defaultLanguage, supportedLanguages) {\n      this.defaultLanguage = defaultLanguage;\n      this.supportedLanguages = supportedLanguages;\n      this.language = ''; // Warning: this subscription will always be alive for the app's lifetime\n\n      this.langChangeSubscription = this.translateService.onLangChange.subscribe(event => {\n        localStorage.setItem(languageKey, event.lang);\n      });\n    }\n    /**\r\n     * Cleans up language change subscription.\r\n     */\n\n\n    destroy() {\n      if (this.langChangeSubscription) {\n        this.langChangeSubscription.unsubscribe();\n      }\n    }\n    /**\r\n     * Sets the current language.\r\n     * Note: The current language is saved to the local storage.\r\n     * If no parameter is specified, the language is loaded from local storage (if present).\r\n     * @param language The IETF language code to set.\r\n     */\n\n\n    set language(language) {\n      language = language || localStorage.getItem(languageKey) || this.translateService.getBrowserCultureLang();\n      let isSupportedLanguage = this.supportedLanguages.includes(language); // If no exact match is found, search without the region\n\n      if (language && !isSupportedLanguage) {\n        language = language.split('-')[0];\n        language = this.supportedLanguages.find(supportedLanguage => supportedLanguage.startsWith(language)) || '';\n        isSupportedLanguage = Boolean(language);\n      } // Fallback if language is not supported\n\n\n      if (!isSupportedLanguage) {\n        language = this.defaultLanguage;\n      }\n\n      log.debug(`Language set to ${language}`);\n      this.translateService.use(language);\n    }\n    /**\r\n     * Gets the current language.\r\n     * @return The current language code.\r\n     */\n\n\n    get language() {\n      return this.translateService.currentLang;\n    }\n\n  }\n\n  I18nService.ɵfac = function I18nService_Factory(t) {\n    return new (t || I18nService)(i0.ɵɵinject(i1.TranslateService));\n  };\n\n  I18nService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: I18nService,\n    factory: I18nService.ɵfac,\n    providedIn: 'root'\n  });\n  return I18nService;\n})();","map":null,"metadata":{},"sourceType":"module"}